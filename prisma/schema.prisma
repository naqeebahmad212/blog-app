// This is your Prisma schema file,;
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String?
  role          String    @default("user")
  posts         Post[]
  emailVerified DateTime?
  image         String?
  profile       Profile?
  Account       Account[]
  Session       Session[]

  @@map("users")
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  @@map("profiles")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  snippet    String
  body       String
  views      Int      @default(0)
  image      String
  public_id  String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String   @db.ObjectId
  categoryId String   @db.ObjectId
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  Post Post[]

  @@map("categories")
}

enum Role {
  USER
  ADMIN
}
